-- Membuat database
CREATE DATABASE perpustakaan;
USE perpustakaan;

-- Membuat tabel
CREATE TABLE kategori (
    id_kategori INT PRIMARY KEY AUTO_INCREMENT,
    nama_kategori VARCHAR(50) NOT NULL,
    deskripsi TEXT
);

CREATE TABLE buku (
    id_buku INT PRIMARY KEY AUTO_INCREMENT,
    judul VARCHAR(100) NOT NULL,
    id_kategori INT,
    pengarang VARCHAR(100),
    penerbit VARCHAR(100),
    tahun_terbit INT,
    stok INT DEFAULT 0,
    FOREIGN KEY (id_kategori) REFERENCES kategori(id_kategori)
);

CREATE TABLE anggota (
    id_anggota INT PRIMARY KEY AUTO_INCREMENT,
    nama VARCHAR(100) NOT NULL,
    alamat TEXT,
    email VARCHAR(100),
    no_telepon VARCHAR(15),
    tanggal_daftar DATE DEFAULT CURRENT_DATE
);

CREATE TABLE peminjaman (
    id_peminjaman INT PRIMARY KEY AUTO_INCREMENT,
    id_anggota INT,
    tanggal_pinjam DATE DEFAULT CURRENT_DATE,
    tanggal_kembali DATE,
    status_peminjaman ENUM('Dipinjam', 'Dikembalikan', 'Terlambat'),
    FOREIGN KEY (id_anggota) REFERENCES anggota(id_anggota)
);

CREATE TABLE detail_peminjaman (
    id_detail INT PRIMARY KEY AUTO_INCREMENT,
    id_peminjaman INT,
    id_buku INT,
    FOREIGN KEY (id_peminjaman) REFERENCES peminjaman(id_peminjaman),
    FOREIGN KEY (id_buku) REFERENCES buku(id_buku)
);

CREATE TABLE log_aktivitas (
    id_log INT PRIMARY KEY AUTO_INCREMENT,
    tanggal DATETIME DEFAULT CURRENT_TIMESTAMP,
    tabel VARCHAR(50),
    aksi VARCHAR(20),
    deskripsi TEXT,
    user VARCHAR(50)
);

-- TRIGGER INSERT
DELIMITER $$
CREATE TRIGGER after_insert_buku
AFTER INSERT ON buku
FOR EACH ROW
BEGIN
INSERT INTO log_aktivitas (tabel, aksi, deskripsi, user)
VALUES ('buku', 'INSERT', CONCAT('Buku baru: ', NEW.judul), USER());
END $$
DELIMITER ;

-- TRIGGER UPDATE
DELIMITER $$
CREATE TRIGGER after_update_buku
AFTER UPDATE ON buku
FOR EACH ROW
BEGIN
IF NEW.stok != OLD.stok THEN
    INSERT INTO log_aktivitas (tabel, aksi, deskripsi, user)
    VALUES ('buku', 'UPDATE', CONCAT('Stok berubah: ', OLD.stok, ' -> ', NEW.stok), USER());
END IF;
END $$
DELIMITER ;

-- TRIGGER DELETE
DELIMITER $$
CREATE TRIGGER before_delete_buku
BEFORE DELETE ON buku
BEGIN
FOR EACH ROW
INSERT INTO log_aktivitas (tabel, aksi, deskripsi, user)
VALUES ('buku', 'DELETE', CONCAT('Buku dihapus: ', OLD.judul), USER());
END $$
DELIMITER ;

-- Fungsi Agregat
SELECT k.nama_kategori, COUNT(b.id_buku) AS jumlah_buku, 
       SUM(b.stok) AS total_stok,
       AVG(b.tahun_terbit) AS rata_rata_tahun_terbit
FROM kategori k
LEFT JOIN buku b ON k.id_kategori = b.id_kategori
GROUP BY k.id_kategori;

-- TCL (Transaction Control Language)
START TRANSACTION;
    SAVEPOINT kosong;
    INSERT INTO peminjaman (id_anggota, tanggal_kembali)
    VALUES (1, DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY));
    SAVEPOINT insert_peminjaman;
    INSERT INTO detail_peminjaman (id_peminjaman, id_buku)
    VALUES (LAST_INSERT_ID(), 1);
    SAVEPOINT insert_detail_peminjaman;
    UPDATE buku SET stok = stok - 1 
    WHERE id_buku = 1;
    SAVEPOINT update;
    COMMIT;
